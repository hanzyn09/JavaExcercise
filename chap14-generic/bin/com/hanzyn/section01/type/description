제네릭 : 내가 직접 지정하는 데이터 타입

제네릭이란, 객체를 저장할 때 지정한 데이터 타입만 저장할 수 있도록 지정하기 위한 기능이다.
예를 들면, 다양한 자료형을 담을 수 있는 컬렉션 프레임워크에서 개발자가 직접 데이터 타입을 지정해서
지정된 타입의 객체만 담을 수 있게 할 수 있다.

컬렉션 프레임워크가 컵이라면,
컵을 물컵 / 커피컵 / 쥬스컵 등 컵에 담을 종류를 미리 지정해서
물컵에는 물 / 커피컵에는 커피 / 쥬스컵엔 쥬스만 담을 수 있도록 지정하는 것이라고 생각하면 된다.

JDK 5 이전버전에서는 실행해서 컬렉션 프레임워크에 있는 객체들을 하나 씩 조회해서 확인하는 방법밖에 없었는데,
오브젝트를 상속받은 객체, 실질적으로 모든 객체가 수집이 가능했던 것 보다 제네릭을 사용하면서 
객체의 타입을 컴파일 시에 체크하기 때문에 체계적이고 안정적으로 객체 수집이 가능해졌다.
또한 이전 방식에서는 객체를 조회하여 별도로 형변환이 필요했다.

ArrayList와 같은 컬렉션 프레임워크 클래스는 다양한 종류의 객체를 담을 수 있긴 하지만
보통 한 종류의 객체를 담는 경우가 더 많다.
그런데도 꺼낼 때마다 타입체크를 하고 형변환을 하는 것은 불편할 수 있다.
하지만 제네릭을 사용하면 <T>사이에 선언 한 객체자료형으로 바로 조회가 가능하여 편리하다.
API에서 전달되는 객체가 현 객체 내에서 자료형으로 쓰일 떄, 타입을 의미 하는 T를 사용하는 걸 권장한다.
만약 전달되는 객체가 현 객체 내에서 key 값으로 사용될때는 <K>로,
전당되는 객체가 현 객체 내에서 value 값으로 사용될 때는 <V>로 표현한다.

==
객체의 데이터 타입을 미리 명시해서 값을 처리할 때 형변환을 하지않아도 되게 하는 것.
제네릭 타입 미지정시 object 타입으로 정의됨.
==

# 제네릭을 사용하는 이유
1. 컴파일 시 강한 타입 체크 가능
2. 타입 변환 코드 제거

# 데이터 타입 변환을 해야하는 예
List list = new ArrayList();
list.add("홍길동");
String name = (String)list.get(0):

# 제네릭을 사용하는 예
List<String> list = new ArrayList<String>();
list.add("홍길동");
String name = list.get(0);
			========> 강제 형변환 소스가 필요 없다 : 자동형변환 되는 것이 아니라, object 타입의 list가 String 타입으로 재정의가 된 것이다.

==

동일한 알고리즘을 사용하는데 데이터의 자료형이 다른 문제 때문에 알고리즘을 다시 구현하는 작업을 하지않게 하기 위한 용도로 사용할 수 있다.

#1 두개의 정수데이터의 자리 바꿈 메서드
public void swap(int n1, int n2){
	int temp = n1;
	n1 = n2;
	n2 = temp;
}

#2 실수의 자리바꿈 메서드
public void swap(double n1, double n2){
	double temp = n1;
	n1 = n2;
	n2 = temp;
}

#3 데이터의 자료형이 늘어나면 중복된 알고리즘을 여러번 작성하게 되는데 이를 방지하기 위해서는 모든 데이터를 전부 대입받을 수 있는 object 를 사용하면 된다.
public void swap(Object n1, Object n2){
	Object temp = n1;
	n1 = n2;
	n2 = temp;
}
그런데, 결과를 돌려받을 때는 매번 강제 형변환을 해서 원래의 자료형으로 복원해서 사용해야하고
사용자가 실수로 정수와 실수 이렇게 다른 종류의 데이터를 대입하는 문제가 생긴다.

# object 대신 임시 자료형을 만들고 데이터를 대입할 때 (객체 생성 시) 알고리즘의 자료형을 결정하는 것이 제네릭이다.
void swap(T n1, T n2){
	T temp = n1;
	n1 = n2;
	n2 = temp;
}

==

T는 객체를 생성할 때 필요한 자료형으로 설정해서 사용하면 된다.
또한 object에서 출발했기 때문에 제네릭에 사용하는 자료형은 무조건 참조형이어야한다.
기본형의 데이터를 이용해서 구현하고자 하면 Wrapper 클래스를 이용한다.
자료구조 클래스에서 많이 이용하며 미지정 자료형의 약자로는 컬렉션의 요소를 의미하는 E, key를 의미하는 K, value를 의미하는 V를 쓴다.

==