
/************************* try-with-resource 방식 *************************/

	try() 괄호 안에서 생성한 객체가 autoCloseable 인터페이스를 구현한 클래스라면
	예외 발생 여부에 상관없이 자원 채제가 자동으로 이루어진다.
	== close() 메서드를 finally 블럭에서 호출하지 않아도 자동으로 호출해준다.
	
/************************************************************************/

1. try-catch 방식

	FileInputStream is = null;
	BufferedInputStream bis = null;
	try {
		is = new FileInputStream("파일명");
		bis = new BufferedInputStream(is);
		int data = -1;
		while((data = bis.read()) != -1 ){
			system.out.prin((char) data);
		}
	} finally {
		//close 메서드 호출
		if( is != null) is.close();
		if( bis != null) bis.close();
	}
	
	
	
2. try-with-resource 방식
	try(
		FileInputStream is = new FileInputStream("파일명");
		bis = new BufferedInputStream(is);
	){
		int data = -1;
		while((data = bis.read()) != -1 ){
			system.out.prin((char) data);
		}
	} catch (IOException e){
		e.printStackTrace();
	}
	
/***************************************************************************************************************/ 

		즉, 파일처리나 DB연결등 자원을 이용하는 경우 
		이렇게 위 예제처럼 파일 자원 처리 시 try-with-resource 방식을 이용하면 실수로 close() 메서드 호출을 빼먹는 경우도 없어지고,
		코드도 짧고 간결해져 유지보수가 수월해진다.

/***************************************************************************************************************/ 