JDK8부터 제공된 람다식은 자바의 고전적인 방식인 객체지향적인 방식이 아닌 함수적 프로그램을 위한 기법에 사용된다.
람다식은 익명 함수를 생성하기 위한 방식으로, 객체 지향언어보다는 함수 지향 언어에 가깝다.
자바 "코드를 간결하게" 할 수 있다.

여러개의 데이터를 가진곳에 작업을 수행하는 경우, 객체 지향 기법에서는 객체를 대입해서 처리해아하는데
이 때 실제 수행할 작업만 전달해서 처리할 수 없다.
여러 개의 데이터에 특정 작업만 수행하려면 객체 지향 언어에서는 별도의 작업만 함수로 생성할 수 없어
Object 클래스로부터 상속받는 클래스를 만들고 그 안에 작업에 관련된 메서드를 정의해서 대입해야 한다.
실제 작업 외의 것들이 포함되어 메모리 낭비 + 함수 호출을 위해선 객체를 통해서 접근하므로 실행 속도도 느려진다.

이런 문제때문에 객체 지향 언어에 함수적 프로그래밍을 추가한 kotlin, scala 같은 언어들이 탄생했고
자바에서는 람다를 이용해서 이런 프로그래밍 방식을 지원한다.

==

람다식은 이름이 없는 익명 함수형태로, 
자바에서는 함수라는 용어를 사용하지 않지만 함수적 인터페이스를 자료형으로 사용한다.
함수적 인터페이스는 추상 메서드가 한 개만 존재하는 인터페이스를 말한다.
(타입 매개변수....)->{
	실행문
}

구조는 메서드와 비슷하지만 이름이 존재하지 않는 메서드이다.
매개변수는 중괄호 블럭을 실행하기 위해 필요한 값을 제공하는 역할을 한다.
매개변수의 타입은 람다식이 호출될 때 대입되는 데이터를 갖고 설정하기 때문에 생략할 수 있다.
갯수가 하나라면 괄호도 생략 할 수 있다.
만약 매개변수가 없다면 괄호를 생략 할 수 없다.
()->{}

만약 중괄호의 실행문이 한 줄밖에 없다면 중괄호를 넣지않고 사용할 수 있다.

==

자바는 다른 언어와 다르게 메서드만 따로 실행 할 수 없고,
객체를 통해서만 실행할 수 있기 때문에
람다식은 메서드를 실행하거나 단순히 선언하는 것이 아니라
해당 메서드를 포함하는 객체를 생성하는 것이다.
그래서 람다식은 인터페이스 타입의 객체 변수를 생성할 때 많이 사용된다.

==