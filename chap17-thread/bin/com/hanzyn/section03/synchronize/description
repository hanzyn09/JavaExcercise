스레드 동기화

하나의 스레드로 동작하는 프로그램은 객체를 생성해서 단독으로 사용하므로 문제가 없다.
여러 스레드로 동작하는 프로그램은 하나의 객체를 함께 사용하므로,
하나의 스레드 입장에서 객체의 값이 변경되는 등 의도치 않은 결과를 얻을 수 있다.
이때, 자바 프로그램에서는 하나의 스레드가 작업이 끝날 때까지 해당 객체가 변경되지 못하도록 하는 것이 동기화(synchronized)이다.
싱크를 맞춘다는 표현을 쓴다. 멀티쓰레드 프로그래밍 시 이 동기화 처리 과정이 매우 중요하다.

==

동기화 영역을 지정하는 방법은 두 가지가 있다.
1. 동기화 메서드
2. 동기화 블록
메서드 또는 중괄호 블록 앞에 synchronized 라는 키워드를 붙이기만 하면 된다.
동기화 영역을 지정하고 나면, 해당 영역이 잠기게 되고, 다른 스레드는 이 영역을 실행할 수 없게 된다.
실행이 종료되면 잠금이 풀린다.

==

스레드 간 협업(교대 작업 처리)
: 공유객체를 이용해 wait() 메서드와 notify()메서드를 함께 사용한다.
둘 다 Object 클래스에 정의된 메서드여서 모든 객체에서 호출이 가능하다.
동기화 블록내에서만 사용이 가능하다.

1. 한 스레드가 객체를 잠그고 오래 기다리는 대신 wait() 메서드를 호출해서 다른 스레드에게 제어권을 넘겨주고(자신이 객체에 걸어놓은 모든 잠금을 푼다)
2. 대기상태로 기다리다가(wait()메서드가 실행된 객체를 기다림),
3. 다른 스레드에 의해서 그 객체에 대해 notify() 가 호출 되면 다시 실행상태가 된다.(그 객체를 자신이 실행될 차례를 기다리는 상태)

wait() : 현재 실행 중인 스레드를 대기상태로 전환

notify() : 객체를 기다리는 스레드 중 하나만 깨움(실행 중으로 변환, 직접 지정 불가)
notifyAll() : 모든 스레드를 깨움, JVM 이 우선순위 높은 걸 알아서 먼저 실행하게 함.
어차피 한번에 한 스레드만 객체를 사용하기 때문에 둘의 큰 차이는 없다.

==


