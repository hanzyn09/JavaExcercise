스레드 (동시에 여러 프로그램 실행)

A 메서드와 B 메서드를 실행/종료 여부와 상관없이 실행되도록 하고 싶은 경우.
프로그램은 하나지만 독립적으로 실행되게한다.
채팅창을 여러개 띄워서 따로 할 수 있게하는 것과 같은 기능이다.

프로세스 : 실행 중인 프로그램
프로그램 실행 시 프로그램에 필요한 메모리를 할당받아 프로세스가 되는데, 이 프로세스 안에서 작업을 수행하는 것 : 스레드
모든 프로세스에는 최소한 하나 이상의 스레드가 존재한다.
두개 이상의 스레드를 가진 프로세스 : 멀티 스레드 프로세스

하나의 프로세스가 가질 수 있는 스레디의 갯수는 제한되어 있지 않지만
스레드가 작업을 수행하는데 개별적인 메모리를 필요로하기 때문에
프로세스의 메모리 크기에 따라 생성할 수 있는 쓰레드의 수가 결정된다.

==

멀티스레드의 장점
1. CPU, 메모리를 효율적으로 사용할 수 있다.
2. 사용자에 대한 응답성이 높아진다.
3. 작업을 스레드 단위로 분리해서 실행시간을 줄일 수 있다.

웹서버에서 멀티스레드
1. 많은 사용자의 요청처리에도 빠르게 응답
2. 에러/오류가 발생해도 해당 스레드에서만 발생하기 때문에 다른 사용자에게 영향을 주지 않게된다.
3. 단, 동기화가 제대로 되지 않거나, 교착상태, 두 개 이상의 작업이 서로 상대방이 끝나길 기다리는 상태이기 때문에
 결국 아무것도 완료되지 않는 상태에 빠질 수 있다. : 데드락
 
 ==
 
 생성하는 방법은 두 가지가 있다.
 1. Thread 클래스를 상속받는다
 	class 클래스명 extends Thread{
 		//run() 메서드를 오버라이딩
 		public void run(){}
 	}
 
 2. Runnable 인터페이스를 구현한 객체를 Thread 객체에 넣어준다 *
 	class 클래스명 implements Runnable{
 		//run() 추상메서드를 구현
 		public void run(){}
 	}