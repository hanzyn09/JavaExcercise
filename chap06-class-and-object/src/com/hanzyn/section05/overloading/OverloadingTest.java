package com.hanzyn.section05.overloading;

public class OverloadingTest {
	/*
	 * 오버로딩의 사용이유
	 * 매개변수의 종류별로 메소드 내용을 다르게 작성해야 하는  경우들이 종종 있다.
	 * 이때, 동일한 기능의 메소드를 매개변수에 따라 다르게 이름을 정의하면 복잡하고 관리하기가 매우 어려워질 것이다.
	 * 동일한이름으로 다양한 종류의 매개변수에 따라 처리해야 하는 여러 메소드를 동일한 이름을 관리하기 위해 사용하는
	 * 기술을 오버로딩이라고 한다.
	 * */
	
	/*
	 * 오버로딩의 조건
	 * 동일한 이름을 가진 메소드의 파라미터 선언부에 매개변수의 타입, 갯수, 순서를 다르게 작성하여
	 * 한 클래스 내에 동일한 이름의 메소드를 여러 개 작성할 수 있도록 한다.
	 * 메소드의 시그니쳐(Signature)가 다르면 다른 메소드로 인식하기 때문이다.
	 * 즉, 시그니쳐 중 메소드 이름은 동일해야 하기 때문에 파라미터 선언부가 다르게 작성되어야 오버로딩이 성립된다.
	 * 
	 * 메소드의 시그니쳐?
	 * public void method(int num){}-> 메소드명과 파라미터 선언부 부분을 시그니쳐라고 부른다. 
	 * method(int num) --> 이부분을 시그니쳐
	 * */
	
	/* 오버로딩을 이용한 메소드 작성 테스트를 위한 기준이 되는 메소드 */
	public void test() {}
	
	/* 메소드의 시그니쳐가 동일한 경우 Compile Error를 발생 */
	//public void test() {}
	
	/* 반환형에 따른 오버로딩 성립 확인 */
	//public int test() { return 0; } // 에러발생 : 접근제한자는 메소드 시그니쳐에 해당하지 않는다.
	
	/* 매개변수 유무에 따른 오버로딩 성립 확인 */
	public void test(int num) {} // 파라미터 선언부는 메소드 시그니쳐에 해당한다.
	
	/* 매개변수의 이름은 메소드 시그니쳐에 영향을 주지 않는다. */
//	public void test(int num2) {}
	
	/* 매개변수 갯수에 따른 오버로딩 성립 확인 */
	public void test(int num1, int num2) {}
	
	/* 매개변수 타입 변화에 따른 오버로딩 성립 확인 */
	public void test(int num, String name) {}
	
	/* 매개변수의 순서에 따른 오버로딩 성립 확인 */
	public void test(String name, int num) {}
}
